// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class StEthPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("cumStaked", Value.fromBigInt(BigInt.zero()));
    this.set("cumUnwrapped", Value.fromBigInt(BigInt.zero()));
    this.set("cumWithdrawal", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StEthPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StEthPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StEthPool", id.toString(), this);
    }
  }

  static load(id: string): StEthPool | null {
    return changetype<StEthPool | null>(store.get("StEthPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cumStaked(): BigInt {
    let value = this.get("cumStaked");
    return value!.toBigInt();
  }

  set cumStaked(value: BigInt) {
    this.set("cumStaked", Value.fromBigInt(value));
  }

  get cumUnwrapped(): BigInt {
    let value = this.get("cumUnwrapped");
    return value!.toBigInt();
  }

  set cumUnwrapped(value: BigInt) {
    this.set("cumUnwrapped", Value.fromBigInt(value));
  }

  get cumWithdrawal(): BigInt {
    let value = this.get("cumWithdrawal");
    return value!.toBigInt();
  }

  set cumWithdrawal(value: BigInt) {
    this.set("cumWithdrawal", Value.fromBigInt(value));
  }

  get Transactions(): Array<string> {
    let value = this.get("Transactions");
    return value!.toStringArray();
  }

  set Transactions(value: Array<string>) {
    this.set("Transactions", Value.fromStringArray(value));
  }
}

export class Tx extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("staked", Value.fromBigInt(BigInt.zero()));
    this.set("withdrawal", Value.fromBigInt(BigInt.zero()));
    this.set("time", Value.fromBigInt(BigInt.zero()));
    this.set("stEthPool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tx entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Tx entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Tx", id.toString(), this);
    }
  }

  static load(id: string): Tx | null {
    return changetype<Tx | null>(store.get("Tx", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staked(): BigInt {
    let value = this.get("staked");
    return value!.toBigInt();
  }

  set staked(value: BigInt) {
    this.set("staked", Value.fromBigInt(value));
  }

  get withdrawal(): BigInt {
    let value = this.get("withdrawal");
    return value!.toBigInt();
  }

  set withdrawal(value: BigInt) {
    this.set("withdrawal", Value.fromBigInt(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get stEthPool(): string {
    let value = this.get("stEthPool");
    return value!.toString();
  }

  set stEthPool(value: string) {
    this.set("stEthPool", Value.fromString(value));
  }
}
